from awsglue.dynamicframe import DynamicFrame
import requests
import sys
from pyspark.sql import SparkSession
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from pyspark.sql.functions import udf, col, lit, to_timestamp, concat, when
from pyspark.sql.types import StringType, IntegerType, StructType, StructField
from awsglue.context import GlueContext
from awsglue.job import Job

# Parameters from the Glue job
args = getResolvedOptions(sys.argv, ['JOB_NAME', 'APP_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

appname = args['APP_NAME']
base_api_url = "https://developer.usastaffing.gov/"

api_key = '6WsWnZc1h11900R1JJEsNrVbQoCXyX5d11qvEmzbbvyROFadle08EYsAÂ¡IsmVWyr'

headers = {
    'Api-Key': api_key
}

# UDF to extract ID from links
@udf(returnType=StringType())
def extract_id_from_links(links, rel_value):
    for link in links:
        if link['rel'] == rel_value:
            try:
                if '/by/' in link['href']:
                    val = link['href'].split('/')[-1]
                    return val.split('|')[-1]
                else:
                    val = link['href'].split('/')[3]
                    return val.split('|')[-1]
            except Exception as e:
                print(f"Error extracting ID: {e}")
                return None
    return None

# API Reader Class
class ReadAPI:
    def __init__(self, table_name, api_url_key, table_schema, timestamp_col_li):
        self.headers = headers
        self.table_schema = table_schema
        self.timestamp_columns = timestamp_col_li
        self.api_url = base_api_url + "/api/" + api_url_key
        self.table_name = table_name

    def convert_raw_list_to_df(self, raw_api_data_list):
        df = spark.createDataFrame(raw_api_data_list, schema=self.table_schema)
        return df

    def fetch_api_data(self, api_url):
        try:
            response = requests.get(api_url, headers=self.headers)
            if response.status_code == 200:
                return response.json()
            else:
                print(f"Error fetching API data: {response.status_code}")
                return None
        except Exception as e:
            print(f"Exception occurred: {e}")
            return None

    def handle_pagination(self, raw_api_data):
        page_dict = raw_api_data['paging']
        self.totalcount = page_dict['metadata']['totalCount']
        self.pagesize = page_dict['metadata']['pageSize']
        self.currentpage = page_dict['metadata']['currentPage']
        self.totalpages = page_dict['metadata']['totalPages']
        self.snapshot = page_dict['metadata']['snapshot']
        self.previous = page_dict.get('previous')
        self.next_api_url = page_dict.get('next')

    def extract_links_rel_list(self, raw_api_data):
        link_li = raw_api_data['data'][0]['_links']
        self.links_rel_list = [ele['rel'] for ele in link_li if ele['rel'] != 'self']

    def concat_df(self, new_df):
        self.df = self.df.union(new_df)

    def handle_links(self):
        df = self.df
        for rel_value in self.links_rel_list:
            df = df.withColumn(rel_value, extract_id_from_links(col("_links"), lit(rel_value)).cast(IntegerType()))
        self.df = df

    def handle_timestamp_columns(self):
        for column in self.timestamp_columns:
            self.df = self.df.withColumn(
                column,
                when(~col(column).contains('.'), concat(col(column), lit('.000'))).otherwise(col(column))
            )
            self.df = self.df.withColumn(column, to_timestamp(col(column), "yyyy-MM-dd'T'HH:mm:ss.SSS"))

    def write_to_redshift(self):
        self.handle_links()
        self.handle_timestamp_columns()
        self.df = self.df.drop('_links')
        input_dynamic_frame = DynamicFrame.fromDF(self.df, glueContext, "input_dynamic_frame")
        glueContext.write_dynamic_frame.from_jdbc_conf(
            frame=input_dynamic_frame,
            catalog_connection="RedshiftConnection",
            connection_options=my_conn_options,
            redshift_tmp_dir="s3://your-s3-path/temp-dir/"
        )

    def process_next_df(self):
        raw_api_data = self.fetch_api_data(base_api_url + self.next_api_url)
        if raw_api_data:
            self.handle_pagination(raw_api_data)
            raw_api_data_list = raw_api_data['data']
            new_df = self.convert_raw_list_to_df(raw_api_data_list)
            self.concat_df(new_df)

    def execute(self):
        raw_api_data = self.fetch_api_data(self.api_url)
        if raw_api_data:
            self.extract_links_rel_list(raw_api_data)
            self.handle_pagination(raw_api_data)
            raw_api_data_list = raw_api_data['data']
            self.df = self.convert_raw_list_to_df(raw_api_data_list)
            if self.totalpages == 1:
                self.write_to_redshift()
            else:
                for i in range(2, self.totalpages + 1):
                    if i % batch_size == 0:
                        self.process_next_df()
                        self.write_to_redshift()

# Process tables and write to Redshift
table_dict = {
    8: "NewHireAppointingAuthority"
}
process_tables = [8]
batch_size = 10

for i in process_tables:
    table_name = table_dict[i]
    redshift_table_name = f"prakash_csv_test.{table_name}"
    my_conn_options = {
        "table": redshift_table_name,
        "database": "hcd-dev-db"
    }
    
    # Assuming map_schema is an external module with this method
    table_schema, timestamp_col_li, api_url_key = mp.get_table_attributes(table_name)
    
    api_reader = ReadAPI(redshift_table_name, api_url_key, table_schema, timestamp_col_li)
    api_reader.execute()

job.commit()
