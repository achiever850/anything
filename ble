WITH CTE_RETIRE AS (
    SELECT 
        f.factpsgvtjobid AS retirementeligibilitysid,
        f.gvt_retire_plan,
        CASE 
            WHEN f.gvt_retire_plan = '1' THEN 'FULL CSRS'
            WHEN f.gvt_retire_plan = '2' THEN 'FICA'
            WHEN f.gvt_retire_plan = '4' THEN 'NONE'
            WHEN f.gvt_retire_plan = '5' THEN 'NAF'
            WHEN f.gvt_retire_plan = '6' THEN 'CSRS-SPEC'
            WHEN f.gvt_retire_plan = 'C' THEN 'CSRS-OFFSET'
            WHEN f.gvt_retire_plan = 'E' THEN 'CSRS-OFFSET-SPEC'
            WHEN f.gvt_retire_plan = 'K' THEN 'FERS'
            WHEN f.gvt_retire_plan = 'KR' THEN 'FERS-RAE'
            WHEN f.gvt_retire_plan = 'KF' THEN 'FERS-FRAE'
            WHEN f.gvt_retire_plan = 'MF' THEN 'FERS-SPEC'
            WHEN f.gvt_retire_plan = 'R' THEN 'FICA AND FULL CSRS'
            WHEN f.gvt_retire_plan = 'T' THEN 'FICA AND FULL CSRS SPEC'
            ELSE 'UNKNOWN'
        END AS category,
        gp.birthdate,
        -- Additional logic for eligibility
        CASE 
            WHEN f.gvt_retire_plan IN ('K','KF','KR','M','MF','MR') THEN
                -- Eligibility calculations
                CASE
                    WHEN DATE_PART('YEAR', gp.birthdate) < 1948 AND ADD_MONTHS(gp.birthdate,660) > ADD_MONTHS(e.gvt_scd_retire, 12*30) THEN ADD_MONTHS(gp.birthdate,660)
                    -- Additional cases here...
                    ELSE ADD_MONTHS(e.gvt_scd_retire,12*30)
                END
            ELSE NULL 
        END AS first_eligibility_date
    FROM 
        DATAWAREHOUSE.HRSMART_FACTPSGVTJOB f
    LEFT JOIN 
        DATAWAREHOUSE.HRSMART_DIMPSGVTEMPLOYMENT e ON f.dimpsgvtemploymentid = e.dimpsgvtemploymentid
    LEFT JOIN 
        DATAWAREHOUSE.HRSMART_DIMPSGVTPERSDATA gp ON f.dimpsgvtpersdataid = gp.dimpsgvtpersdataid
),
CTE_DETAIL AS (
    SELECT
        gj.emplid,
        gj.empl_rcd,
        gj.effdt,
        r.category,
        r.first_eligibility_date,
        CASE 
            WHEN r.first_eligibility_date IS NULL THEN NULL 
            WHEN r.first_eligibility_date <= DATE '2024-08-08' THEN 'YES' 
            ELSE 'NO' 
        END AS retirement_eligible_flag,
        (DATEDIFF(YEAR, r.birthdate, DATE '2024-08-08') - CASE WHEN DATE '2024-08-08' < r.birthdate THEN 1 ELSE 0 END) AS age,
        CASE 
            WHEN age >= 65 THEN '65+'
            WHEN age >= 55 AND age < 65 THEN '55-64'
            WHEN age >= 45 AND age < 55 THEN '45-54'
            WHEN age >= 35 AND age < 45 THEN '35-44'
            WHEN age >= 30 AND age < 35 THEN '30-34'
            WHEN age >= 25 AND age < 30 THEN '25-29'
            ELSE '24 AND UNDER'
        END AS age_group
    FROM 
        DATAWAREHOUSE.HRSMART_FACTPSGVTJOB gj
    LEFT JOIN 
        DATAWAREHOUSE.HRSMART_DIMPSGVTPAYPLAN pp ON gj.dimpsgvtpayplanid = pp.dimpsgvtpayplanid
    LEFT JOIN 
        CTE_RETIRE r ON gj.factpsgvtjobid = r.retirementeligibilitysid
    WHERE 
        '2024-06-05' BETWEEN gj.effdt AND gj.expdt 
        AND pp.gvt_pay_plan != '00'
        AND gj.empl_status IN ('A', 'L', 'S', 'P', 'W')
        AND gj.gvt_status_type IN ('COM', 'COR')
)

SELECT 
    category,
    age_group,
    COUNT(DISTINCT emplid) AS employee_count,
    STRING_AGG(DISTINCT emplid, ', ') AS emplids
FROM 
    CTE_DETAIL
WHERE 
    retirement_eligible_flag = 'YES'
GROUP BY 
    category, age_group

UNION ALL

SELECT 
    category,
    age_group,
    COUNT(DISTINCT emplid) AS employee_count,
    STRING_AGG(DISTINCT emplid, ', ') AS emplids
FROM 
    CTE_DETAIL
WHERE 
    retirement_eligible_flag IS NULL
GROUP BY 
    category, age_group

UNION ALL

SELECT 
    'NON-ELIGIBLE' AS category,
    age_group,
    COUNT(DISTINCT emplid) AS employee_count,
    STRING_AGG(DISTINCT emplid, ', ') AS emplids
FROM 
    CTE_DETAIL
WHERE 
    retirement_eligible_flag = 'NO'
GROUP BY 
    age_group

UNION ALL

SELECT 
    'TOTAL ACTIVE EMPLOYEE' AS category,
    age_group,
    COUNT(DISTINCT emplid) AS employee_count,
    STRING_AGG(DISTINCT emplid, ', ') AS emplids
FROM 
    CTE_DETAIL
GROUP BY 
    age_group

ORDER BY 
    category, age_group;
